name: Quiz application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]


jobs:
  test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        pip install -r app_code/backend/requirements.txt

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      working-directory: ./app_code/backend

  sonarqube:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting.
          fetch-depth: 0

      # Triggering SonarQube analysis as results of it are required by Quality Gate check.
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL

    # - name: SonarQube Shellcheck
    #   uses: sunilagarwal22-zz/sonarscanner-shell@2.0

    # - name: SonarQube Scan
    #   run: sonar-scanner
    #        -Dsonar.host.url=${{ secrets.SONAR_URL }}
    #        -Dsonar.login=${{ secrets.SONAR_TOKEN }}
    #        -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
    #        -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
    #        -Dsonar.sources=/app_code/backend


  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build and push backend Docker image
      working-directory: ./app_code/backend
      run: |
        docker build . -t ${{ secrets.DOCKER_USERNAME }}/backend
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push ${{ secrets.DOCKER_USERNAME }}/backend

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build and push frontend Docker image
      working-directory: ./app_code/frontend
      run: |
        docker build . -t ${{ secrets.DOCKER_USERNAME }}/frontend
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push ${{ secrets.DOCKER_USERNAME }}/frontend